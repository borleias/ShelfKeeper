// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShelfKeeper.Infrastructure.Persistence;

#nullable disable

namespace ShelfKeeper.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250716090628_AddUserRole")]
    partial class AddUserRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-preview.1.25081.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_locations_user_id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_item_id");

                    b.HasKey("Id")
                        .HasName("pk_media_images");

                    b.HasIndex("MediaItemId")
                        .HasDatabaseName("ix_media_images_media_item_id");

                    b.ToTable("media_images", (string)null);
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("IsbnUpc")
                        .HasColumnType("text")
                        .HasColumnName("isbn_upc");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Progress")
                        .HasColumnType("text")
                        .HasColumnName("progress");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int?>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_media_items");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_media_items_author_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_media_items_location_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_media_items_user_id");

                    b.ToTable("media_items", (string)null);
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaItemTag", b =>
                {
                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_item_id");

                    b.Property<Guid>("MediaTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_tag_id");

                    b.HasKey("MediaItemId", "MediaTagId")
                        .HasName("pk_media_item_tags");

                    b.HasIndex("MediaTagId")
                        .HasDatabaseName("ix_media_item_tags_media_tag_id");

                    b.ToTable("media_item_tags", (string)null);
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_media_tags");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_media_tags_user_id");

                    b.ToTable("media_tags", (string)null);
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_renew");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plan");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_subscriptions_user_id");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text")
                        .HasColumnName("password_reset_token");

                    b.Property<DateTime?>("PasswordResetTokenExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset_token_expiration");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.Location", b =>
                {
                    b.HasOne("ShelfKeeper.Domain.Entities.User", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaImage", b =>
                {
                    b.HasOne("ShelfKeeper.Domain.Entities.MediaItem", "MediaItem")
                        .WithMany("MediaImages")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_images_media_items_media_item_id");

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaItem", b =>
                {
                    b.HasOne("ShelfKeeper.Domain.Entities.Author", "Author")
                        .WithMany("MediaItems")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_media_items_authors_author_id");

                    b.HasOne("ShelfKeeper.Domain.Entities.Location", "Location")
                        .WithMany("MediaItems")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_media_items_locations_location_id");

                    b.HasOne("ShelfKeeper.Domain.Entities.User", "User")
                        .WithMany("MediaItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_items_users_user_id");

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaItemTag", b =>
                {
                    b.HasOne("ShelfKeeper.Domain.Entities.MediaItem", "MediaItem")
                        .WithMany("MediaItemTags")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_item_tags_media_items_media_item_id");

                    b.HasOne("ShelfKeeper.Domain.Entities.MediaTag", "MediaTag")
                        .WithMany("MediaItemTags")
                        .HasForeignKey("MediaTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_item_tags_media_tags_media_tag_id");

                    b.Navigation("MediaItem");

                    b.Navigation("MediaTag");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaTag", b =>
                {
                    b.HasOne("ShelfKeeper.Domain.Entities.User", "User")
                        .WithMany("MediaTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_tags_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("ShelfKeeper.Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.Author", b =>
                {
                    b.Navigation("MediaItems");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.Location", b =>
                {
                    b.Navigation("MediaItems");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaItem", b =>
                {
                    b.Navigation("MediaImages");

                    b.Navigation("MediaItemTags");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.MediaTag", b =>
                {
                    b.Navigation("MediaItemTags");
                });

            modelBuilder.Entity("ShelfKeeper.Domain.Entities.User", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("MediaItems");

                    b.Navigation("MediaTags");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
